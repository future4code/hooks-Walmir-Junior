// ATENÇÃO!!!
//    -> NÃO COMENTE NENHUMA DAS FUNÇÕES DECLARADAS!!! 
//    -> NÃO MODIFIQUE OS PARÂMETROS DAS FUNÇÕES!!! ()


// EXERCÍCIO 01
function retornaTamanhoArray(array) {
   return array.length;
}

// EXERCÍCIO 02
function retornaArrayInvertido(array) {
   return array.reverse()
}


// EXERCÍCIO 03
function retornaArrayOrdenado(array) {
   const arrOrdenado = array.sort((a,b) => {
      if (a > b) return 1;
      if (a < b) return -1;
      return 0;
   });
   return arrOrdenado;
}

// EXERCÍCIO 04
function retornaNumerosPares(array) {
   let numPares = [];
   for (let i = 0; i < array.length; i++){
      if (array[i] % 2 === 0){
         numPares.push(array[i]);
      };
   };

   return numPares;
}

// EXERCÍCIO 05
function retornaNumerosParesElevadosADois(array) {
   let numPares = [];
   for (let i = 0; i < array.length; i++){
      if (array[i] % 2 === 0){
         numPares.push(array[i] ** 2);
      };
   };

   return numPares;
 
}

// EXERCÍCIO 06
function retornaMaiorNumero(array) {
   const maiorNum = Math.max(...array);
   
   return maiorNum;
}

// EXERCÍCIO 07
function retornaObjetoEntreDoisNumeros(num1, num2) {
   const maiorNum = Math.max(num1, num2);
   const menorNum = Math.min(num1, num2);
   const diferenca = maiorNum - menorNum;
   let divisivel = false

   if (maiorNum % menorNum === 0){
      divisivel = true;
   };

   return {
      maiorNumero:maiorNum,
      maiorDivisivelPorMenor: divisivel,
      diferenca: diferenca  
   };
}

// EXERCÍCIO 08
function retornaNPrimeirosPares(n) {
   let pares = [];
   let numerosPares = 0;
   
   while(pares < n){
      if (numerosPares % 2 === 0){
         pares.push(numerosPares);
         numerosPares++;
      };
   };

   return pares; 
}

retornaNPrimeirosPares(2)

// EXERCÍCIO 09
function classificaTriangulo(ladoA, ladoB, ladoC) {

}

// EXERCÍCIO 10
function retornaSegundoMaiorESegundoMenor(array) {
  
}

// EXERCÍCIO 11
function retornaChamadaDeFilme(filme) {
   
}

// EXERCÍCIO 12
function retornaPessoaAnonimizada(pessoa) {
   
}

// EXERCÍCIO 13A
function retornaPessoasAutorizadas(pessoas) {
   
}

// EXERCÍCIO 13B
function retornaPessoasNaoAutorizadas(pessoas) {
  
}

// EXERCÍCIO 14
function retornaContasComSaldoAtualizado(contas) {

}

// EXERCÍCIO 15A
function retornaArrayOrdenadoAlfabeticamente(consultas) {
  
}

// EXERCÍCIO 15B
function retornaArrayOrdenadoPorData(consultas) {
   
}